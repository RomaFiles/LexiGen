/* analizador.java */
/* Generated By:JavaCC: Do not edit this line. analizador.java */
import java.io.*;
import java.util.*;

public class analizador implements analizadorConstants {
    private static File codigoFuente;
    private static Environment environment = new Environment();  // Entorno para manejo de ámbitos
    private static GeneradorObj trans; // Ahora es solo declarado aquí, no inicializado
    static int tempCount = 0;
    String cpp = "";

    static String newTemp() {
        return "t" + tempCount++;
    }

    static void readVariable(String variableName) {
        if (!environment.isDeclared(variableName)) {
            System.out.println("Error sem\u00e1ntico: Variable '" + variableName + "' no declarada.");
            return;
        }

        Scanner scanner = new Scanner(System.in);
        String type = environment.getSymbolType(variableName);
        try {
            switch (type) {
                case "int":
                    int intValue = scanner.nextInt();
                    environment.updateSymbolValue(variableName, intValue);
                    break;
                case "float":
                    float floatValue = scanner.nextFloat();
                    environment.updateSymbolValue(variableName, floatValue);
                    break;
                case "bool":
                    boolean boolValue = scanner.nextBoolean();
                    environment.updateSymbolValue(variableName, boolValue);
                    break;
                case "string":
                    String stringValue = scanner.nextLine();
                    environment.updateSymbolValue(variableName, stringValue);
                    break;
                default:
                    System.out.println("Tipo no soportado.");
            }
        } catch (InputMismatchException e) {
            System.out.println("Tipo de entrada incorrecto. Por favor, intente nuevamente.");
            scanner.nextLine();  // Limpia el buffer del escáner
        }
    }

    public static void main(String[] args) {
        codigoFuente = new File(args[0]);
        String nombreBase = codigoFuente.getName().replaceFirst("[.][^.]+$", "");
        String archivoCpp = "/Users/rodrigo.mb89/Desktop/LexiGen/" + nombreBase + ".cpp";

        trans = new GeneradorObj(archivoCpp);  // Inicializa aquí con el nombre dinámico

        environment.pushScope();  // Iniciar un ámbito global
        try {
            analizadorTokenManager lexicManager = new analizadorTokenManager(new SimpleCharStream(new InputStreamReader(new FileInputStream(codigoFuente), "UTF-8")));
            analizador parser = new analizador(lexicManager);
            try {
                parser.Programa();  // Realiza el análisis del programa
                System.out.println("An\u00e1lisis completado.");

                // Corregir finales de línea del script usando dos2unix
                String dos2unixCommand = "dos2unix /Users/rodrigo.mb89/Desktop/LexiGen/Ensamble.sh";
                Runtime.getRuntime().exec(dos2unixCommand);

                // Espera breve para asegurarse que dos2unix haya terminado
                Thread.sleep(500);  // 500 ms es generalmente suficiente

                // Ejecutar el script shell después de completar el análisis
                String ejecutable = "/Users/rodrigo.mb89/Desktop/LexiGen/" + nombreBase;
                String shellCommand = String.format("/bin/bash /Users/rodrigo.mb89/Desktop/Lexigen/Ensamble.sh %s %s", archivoCpp, ejecutable);
                Process process = Runtime.getRuntime().exec(shellCommand);
                BufferedReader stdInput = new BufferedReader(new InputStreamReader(process.getInputStream()));
                BufferedReader stdError = new BufferedReader(new InputStreamReader(process.getErrorStream()));

                // Leer la salida estándar del script
                String s;
                while ((s = stdInput.readLine()) != null) {
                    System.out.println(s);
                }

                // Leer errores si los hay
                while ((s = stdError.readLine()) != null) {
                    System.err.println(s);
                }

                // Esperar a que el proceso termine y obtener el código de salida
                int exitVal = process.waitFor();
                System.out.println("C\u00f3digo de salida del script: " + exitVal);

            } catch (ParseException ex) {
                System.out.println("Error sint\u00e1ctico: " + ex.getMessage());
            } catch (IOException e) {
                System.err.println("Error al ejecutar el script: " + e.getMessage());
            } catch (InterruptedException e) {
                System.err.println("El proceso fue interrumpido: " + e.getMessage());
            }
        } catch (FileNotFoundException ex) {
            System.err.println("Archivo no encontrado: " + args[0]);
        } catch (TokenMgrError ex) {
            System.err.println("Error l\u00e9xico: " + ex.getMessage());
        } catch (Exception e) {
            System.err.println("Error general: " + e.getMessage());
        } finally {
            environment.popScope();  // Cerrar el ámbito global
        }
    }

    static boolean isTypeCompatible(String declaredType, Object value) {
        if (declaredType.equals("int") && value instanceof Integer) return true;
        if (declaredType.equals("float") && value instanceof Float) return true;
        if (declaredType.equals("bool") && value instanceof Boolean) return true;
        if (declaredType.equals("string") && value instanceof String) return true;
        return false;
    }

    static String getType(Object value) {
        if (value instanceof Integer) return "int";
        if (value instanceof Float) return "float";
        if (value instanceof Boolean) return "bool";
        if (value instanceof String) return "string";
        return "unknown";
    }

  final public void Main() throws ParseException {
    try {
      Programa();
      jj_consume_token(0);
    } catch (ParseException e) {
System.out.println("Error de parseo: " + e.getMessage());
    }
}

  final public void Programa() throws ParseException {
    jj_consume_token(INIT);
    Bloque();
    jj_consume_token(END);
trans.EscribirCod("// Inicio del programa en C++\n");
        trans.EscribirCod(cpp);
        trans.EscribirCod("\n// Fin del programa en C++\n");
        trans.EscribirCod("return 0;\n}");
}

  final public void Bloque() throws ParseException {
    jj_consume_token(LLAVE_IZQ);
    Sentencias();
    jj_consume_token(LLAVE_DER);
}

  final public void Sentencias() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER:
      case FLOAT:
      case BOOLEANO:
      case STRING:
      case PRINT:
      case INPUT:
      case FOR:
      case IF:
      case WHILE:
      case DO:
      case DEFINE_FUNC:
      case NOMBRE_VAR:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PRINT:{
        Impresion();
        break;
        }
      case IF:{
        If();
        break;
        }
      case INTEGER:
      case FLOAT:
      case BOOLEANO:
      case STRING:{
        Declaracion();
        break;
        }
      case NOMBRE_VAR:{
        Inicializacion();
        break;
        }
      case INPUT:{
        Lectura();
        break;
        }
      case WHILE:{
        While();
        break;
        }
      case DO:{
        DoWhile();
        break;
        }
      case FOR:{
        For();
        break;
        }
      case DEFINE_FUNC:{
        Funcion();
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  final public void Arreglo() throws ParseException {Token num;
    try {
      jj_consume_token(CORCH_IZQ);
cpp += "[";
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 corchete izquierdo [ en la l\u00ednea " + token.beginLine + ", columna " + token.beginColumn + " despu\u00e9s de " + token.image);
    }
    try {
      num = jj_consume_token(NUMERO);
cpp += num.image;
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 un n\u00famero en la l\u00ednea " + token.beginLine + ", columna " + token.beginColumn + " despu\u00e9s de " + token.image);
    }
    try {
      jj_consume_token(CORCH_DER);
cpp += "]";
    } catch (ParseException ex) {
System.out.println("Error sint\u00e1ctico, no se encontr\u00f3 corchete derecho ] en la l\u00ednea " + token.beginLine + ", columna " + token.beginColumn + " despu\u00e9s de " + token.image);
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CORCH_IZQ:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      Arreglo();
    }
}

  final public void Operacion() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SUMA:
    case RESTA:
    case MULTI:
    case DIV:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SUMA:{
        jj_consume_token(SUMA);
        break;
        }
      case RESTA:{
        jj_consume_token(RESTA);
        break;
        }
      case MULTI:{
        jj_consume_token(MULTI);
        break;
        }
      case DIV:{
        jj_consume_token(DIV);
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMERO:{
        jj_consume_token(NUMERO);
        break;
        }
      case NOMBRE_VAR:{
        jj_consume_token(NOMBRE_VAR);
        break;
        }
      case DECIMAL:{
        jj_consume_token(DECIMAL);
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case AND:
    case OR:
    case NOT:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        jj_consume_token(AND);
        break;
        }
      case OR:{
        jj_consume_token(OR);
        break;
        }
      case NOT:{
        jj_consume_token(NOT);
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMERO:{
        jj_consume_token(NUMERO);
        break;
        }
      case NOMBRE_VAR:{
        jj_consume_token(NOMBRE_VAR);
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void Lectura() throws ParseException {Token var;
    jj_consume_token(INPUT);
    var = jj_consume_token(NOMBRE_VAR);
    jj_consume_token(FIN_LINE);
cpp += "cin >> " + var.image + ";\n"; // Traducción directa para la entrada estándar de C++

}

  final public void Impresion() throws ParseException {String expr;
    boolean first = true; // Para controlar la inserción del operador <<

    jj_consume_token(PRINT);
    jj_consume_token(PAREN_IZQ);
    expr = Expresion();
cpp += "cout << " + expr;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMA:{
        ;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMA);
      expr = Expresion();
cpp += " << " + expr; // Concatena cada expresión adicional con el operador <<

    }
    jj_consume_token(PAREN_DER);
    jj_consume_token(FIN_LINE);
cpp += " << endl;"; // Finaliza con el salto de línea en C++

}

  final public void Declaracion() throws ParseException {Token tipo;
    Token var;
    Object expr = null;
    String tipoEsperado = null;
    String declCode = "";
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER:{
      jj_consume_token(INTEGER);
tipoEsperado = "int"; declCode = "int ";
      break;
      }
    case FLOAT:{
      jj_consume_token(FLOAT);
tipoEsperado = "float"; declCode = "float ";
      break;
      }
    case BOOLEANO:{
      jj_consume_token(BOOLEANO);
tipoEsperado = "bool"; declCode = "bool ";
      break;
      }
    case STRING:{
      jj_consume_token(STRING);
tipoEsperado = "string"; declCode = "string ";
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    var = jj_consume_token(NOMBRE_VAR);
declCode += var.image;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASIGNA:{
      jj_consume_token(ASIGNA);
      expr = Valor();
declCode += " = " + expr.toString();
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    jj_consume_token(FIN_LINE);
if (environment.isDeclaredLocally(var.image)) {
            System.out.println("Error sem\u00e1ntico: Variable '" + var.image + "' ya declarada en el \u00e1mbito actual.");
        } else {
            environment.declareSymbol(var.image, tipoEsperado);
            if (expr != null && !isTypeCompatible(tipoEsperado, expr)) {
                System.out.println("Error sem\u00e1ntico: Tipo de dato incorrecto para la variable '" + var.image + "' en la l\u00ednea: " + var.beginLine + ". Esperado: " + tipoEsperado + ", encontrado: " + getType(expr) + ".");
            } else {
                cpp += declCode + ";\n";  // Correctamente añadir la declaración al código C++
            }
        }
}

  final public Object Valor() throws ParseException {Token valorToken;
    Object result= "";
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMERO:{
      valorToken = jj_consume_token(NUMERO);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case AND:
        case OR:
        case NOT:
        case SUMA:
        case RESTA:
        case MULTI:
        case DIV:{
          ;
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          break label_4;
        }
        Operacion();
      }
result = Integer.parseInt(valorToken.image); {if ("" != null) return result;}
      break;
      }
    case DECIMAL:{
      valorToken = jj_consume_token(DECIMAL);
result = Float.parseFloat(valorToken.image); {if ("" != null) return result;}
      break;
      }
    case CADENA:{
      valorToken = jj_consume_token(CADENA);
result = valorToken.image.substring(1, valorToken.image.length() - 1); {if ("" != null) return result;}
      break;
      }
    case NOMBRE_VAR:{
      valorToken = jj_consume_token(NOMBRE_VAR);
result = environment.getSymbolType(valorToken.image); {if ("" != null) return result;}
      break;
      }
    case TRUE:{
      jj_consume_token(TRUE);
{if ("" != null) return Boolean.TRUE;}
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
{if ("" != null) return Boolean.FALSE;}
      break;
      }
    case PAREN_IZQ:{
      jj_consume_token(PAREN_IZQ);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NOMBRE_VAR:{
        jj_consume_token(NOMBRE_VAR);
        break;
        }
      case NUMERO:{
        jj_consume_token(NUMERO);
        break;
        }
      case DECIMAL:{
        jj_consume_token(DECIMAL);
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Operacion();
      Termino();
      Valor();
      jj_consume_token(PAREN_DER);
{if ("" != null) return result;}
      break;
      }
    case CORCH_IZQ:{
      Arreglo();
{if ("" != null) return result;}
      break;
      }
    default:
      jj_la1[13] = jj_gen;
{if ("" != null) return null;}
    }
    throw new Error("Missing return statement in function");
}

  final public void Inicializacion() throws ParseException {Token var;
    String expr;
    var = jj_consume_token(NOMBRE_VAR);
    jj_consume_token(ASIGNA);
    expr = Expresion();
    jj_consume_token(FIN_LINE);
if (!environment.isDeclared(var.image)) {
            System.out.println("Error sem\u00e1ntico: Variable '" + var.image + "' no declarada.");
            cpp += var.image + " = " + expr + ";\n";  // Asumiendo que el error se maneja en otro lado
        } else {
            // Asumiendo que se verifica el tipo y otros errores semánticos antes de este punto
            cpp += var.image + " = " + expr + ";\n";
        }
}

  final public String ExpresionLogica() throws ParseException {String cond = "";
    Token op = null;  // Inicializar op

    cond = Expresion();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:
      case OR:
      case IGUAL_QUE:
      case DIFERENTE_QUE:
      case MAYOR_QUE:
      case MENOR_QUE:
      case MAYOR_IGUAL_QUE:
      case MENOR_IGUAL_QUE:{
        ;
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IGUAL_QUE:{
        jj_consume_token(IGUAL_QUE);
cond += "==";
            cond += Expresion();
        break;
        }
      case DIFERENTE_QUE:{
        jj_consume_token(DIFERENTE_QUE);
cond += "!=";
            cond += Expresion();
        break;
        }
      case MAYOR_QUE:{
        jj_consume_token(MAYOR_QUE);
cond += ">";
            cond += Expresion();
        break;
        }
      case MENOR_QUE:{
        jj_consume_token(MENOR_QUE);
cond += "<";
            cond += Expresion();
        break;
        }
      case MAYOR_IGUAL_QUE:{
        jj_consume_token(MAYOR_IGUAL_QUE);
cond += ">=";
            cond += Expresion();
        break;
        }
      case MENOR_IGUAL_QUE:{
        jj_consume_token(MENOR_IGUAL_QUE);
cond += "<=";
            cond += Expresion();
        break;
        }
      case AND:{
        jj_consume_token(AND);
cond += "and";
            cond += Expresion();
        break;
        }
      case OR:{
        jj_consume_token(OR);
cond += "or";
            cond += Expresion();
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return cond;}
    throw new Error("Missing return statement in function");
}

  final public String Expresion() throws ParseException {String result = "";
    result = Termino();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SUMA:
      case RESTA:
      case ASIGNA:{
        ;
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SUMA:{
        jj_consume_token(SUMA);
result += " + ";
            result += Termino();
        break;
        }
      case RESTA:{
        jj_consume_token(RESTA);
result += " - ";
            result += Termino();
        break;
        }
      case ASIGNA:{
        jj_consume_token(ASIGNA);
result += " = ";
            result += Termino();
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
}

  final public String Termino() throws ParseException {String t1, t2;
    Token mulop;
    t1 = Factor();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MULTI:
      case DIV:{
        ;
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MULTI:{
        mulop = jj_consume_token(MULTI);
        t2 = Termino();
String temp = newTemp();
            t1 = temp;
        break;
        }
      case DIV:{
        mulop = jj_consume_token(DIV);
        t2 = Termino();
String temp = newTemp();
            t1 = temp;
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
}

  final public String Factor() throws ParseException {Token t;
    String result = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      t = jj_consume_token(NOT);
      result = Factor();
String temp = newTemp(); {if ("" != null) return temp;}
      break;
      }
    case NOMBRE_VAR:{
      t = jj_consume_token(NOMBRE_VAR);
{if ("" != null) return t.image;}
      break;
      }
    case NUMERO:{
      t = jj_consume_token(NUMERO);
{if ("" != null) return t.image;}
      break;
      }
    case DECIMAL:{
      t = jj_consume_token(DECIMAL);
{if ("" != null) return t.image;}
      break;
      }
    case CADENA:{
      t = jj_consume_token(CADENA);
{if ("" != null) return t.image;}
      break;
      }
    case CORCH_IZQ:{
      Arreglo();
{if ("" != null) return result;}
      break;
      }
    case PAREN_IZQ:{
      jj_consume_token(PAREN_IZQ);
      result = Expresion();
      jj_consume_token(PAREN_DER);
{if ("" != null) return result;}
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public void If() throws ParseException {String cond;
    jj_consume_token(IF);
    jj_consume_token(PAREN_IZQ);
    cond = ExpresionLogica();
    jj_consume_token(PAREN_DER);
cpp += "if (" + cond + ") {\n";
    Bloque();
cpp += "}\n";
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ELSE_IF:{
        ;
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        break label_8;
      }
      jj_consume_token(ELSE_IF);
      jj_consume_token(PAREN_IZQ);
      cond = ExpresionLogica();
      jj_consume_token(PAREN_DER);
cpp += "else if (" + cond + ") {\n";
      Bloque();
cpp += "}\n";
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
cpp += "else {\n";
      Bloque();
cpp += "}\n";
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      ;
    }
}

  final public void While() throws ParseException {String cond;
    jj_consume_token(WHILE);
    jj_consume_token(PAREN_IZQ);
    cond = ExpresionLogica();
    jj_consume_token(PAREN_DER);
cpp += "while (" + cond + ") {\n";
    Bloque();
cpp += "}\n";
}

  final public void For() throws ParseException {String init, cond, update;
    jj_consume_token(FOR);
    jj_consume_token(PAREN_IZQ);
    init = InicializacionFor();
    jj_consume_token(FIN_LINE);
    cond = ExpresionLogica();
    jj_consume_token(FIN_LINE);
    update = Expresion();
    jj_consume_token(PAREN_DER);
cpp += "for (" + init + "; " + cond + "; " + update + ") {\n";
    Bloque();
cpp += "}\n";
}

  final public String InicializacionFor() throws ParseException {Token var;
    String expr;
    String result = "";
    var = jj_consume_token(NOMBRE_VAR);
    jj_consume_token(ASIGNA);
    expr = Expresion();
result = var.image + " = " + expr;
        if (!environment.isDeclared(var.image)) {
            System.out.println("Error sem\u00e1ntico: Variable '" + var.image + "' no declarada.");
        }
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
}

  final public void DoWhile() throws ParseException {String cond;
    jj_consume_token(DO);
cpp += "do {\n";
    Bloque();
    jj_consume_token(WHILE);
    jj_consume_token(PAREN_IZQ);
    cond = ExpresionLogica();
    jj_consume_token(PAREN_DER);
    jj_consume_token(FIN_LINE);
cpp += "} while (" + cond + ");\n";
}

  final public void Funcion() throws ParseException {Token tipoRetorno, nombreFuncion;
    jj_consume_token(DEFINE_FUNC);
    tipoRetorno = jj_consume_token(VOID);
tipoRetorno = token;
    // Capturar el token VOID como tipo de retorno
        nombreFuncion = jj_consume_token(NOMBRE_VAR);
nombreFuncion = token;
    jj_consume_token(PAREN_IZQ);
    jj_consume_token(PAREN_DER);
cpp += tipoRetorno.image + " " + nombreFuncion.image + "() {\n";  // Comenzar la definición de la función en C++

    Bloque();
cpp += "}\n";  // Cerrar la definición de la función en C++

}

  /** Generated Token Manager. */
  public analizadorTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[23];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x73c780,0x73c780,0x0,0x78000000,0x0,0x3800,0x0,0x78003800,0x0,0x780,0x0,0x78003800,0x0,0x3000000,0x80001800,0x80001800,0x18000000,0x18000000,0x60000000,0x60000000,0x2000,0x80000,0x40000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x10000,0x10000,0x800,0x0,0x150000,0x0,0x50000,0x0,0x2000,0x0,0x20,0x0,0x150000,0x158a00,0x1f,0x1f,0x20,0x20,0x0,0x0,0x158a00,0x0,0x0,};
	}

  /** Constructor with InputStream. */
  public analizador(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public analizador(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new analizadorTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public analizador(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new analizadorTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new analizadorTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public analizador(analizadorTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(analizadorTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[54];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 23; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 54; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}

class GeneradorObj {
    private File f;

    public GeneradorObj(String ruta) {
        f = new File(ruta);
        CleanCPP();
        EscribirCod(
            "#include <stdio.h>\n" +
            "#include <iostream>\n" +
            "#include <string>\n" +
            "#include <cstring>\n" +
            "#include <locale.h>\n" +
            "using namespace std;\n" +
            "int main(){\n"
        );
    }

    public void EscribirCod(String s) {  // Transcribe el codigo
        try {
            FileWriter w = new FileWriter(f, true);
            BufferedWriter bw = new BufferedWriter(w);
            PrintWriter wr = new PrintWriter(bw);
            wr.write(s);  // Escribimos en el archivo
            wr.close();
            bw.close();
        } catch (IOException e) {
            e.printStackTrace();
            System.out.println("No se pudo escribir");
        }
    }

    private void CleanCPP() {
        try {
            FileWriter w = new FileWriter(f, false);
            BufferedWriter bw = new BufferedWriter(w);
            PrintWriter wr = new PrintWriter(bw);
            wr.write("");  // Escribimos en el archivo
            wr.close();
            bw.close();
        } catch (IOException e) {
            e.printStackTrace();
            System.out.println("No se pudo limpiar");
        }
    }

    public void end_to_CPlus() {
        EscribirCod("system(\"pause\");\nreturn 0;\n}");
    }
}

class Environment {
    private LinkedList<SymbolTable> scopes = new LinkedList<SymbolTable>();

    public void pushScope() {
        scopes.push(new SymbolTable());
    }

    public void popScope() {
        if (!scopes.isEmpty()) {
            scopes.pop();
        }
    }

    public void declareSymbol(String identifier, String type) {
        if (!scopes.isEmpty()) {
            scopes.peek().declareSymbol(identifier, type);
        }
    }

    public String getSymbolType(String identifier) {
        for (SymbolTable table : scopes) {
            if (table.isDeclared(identifier)) {
                return table.getSymbolType(identifier);
            }
        }
        return null;  // Retorna null si la variable no está declarada
    }

    public boolean isDeclared(String identifier) {
        for (SymbolTable table : scopes) {
            if (table.isDeclared(identifier)) {
                return true;
            }
        }
        return false;
    }

    public boolean isDeclaredLocally(String identifier) {
        if (!scopes.isEmpty()) {
            return scopes.peek().isDeclared(identifier);
        }
        return false;
    }

    public void updateSymbolValue(String identifier, Object value) {
        if (!scopes.isEmpty()) {
            SymbolTable currentScope = scopes.peek();
            if (currentScope.isDeclared(identifier)) {
                currentScope.updateValue(identifier, value);
            } else {
                System.out.println("Variable '" + identifier + "' no ha sido declarada en el \u00e1mbito actual.");
            }
        } else {
            System.out.println("No hay un \u00e1mbito activo en el que actualizar la variable.");
        }
    }
}
