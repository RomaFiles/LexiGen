options{
    STATIC = false;
}

PARSER_BEGIN(analizador)

import java.io.*;
import java.util.*;

public class analizador {
    private static File codigoFuente;
    private static Environment environment = new Environment();  // Entorno para manejo de ámbitos
    private static GeneradorObj trans; // Ahora es solo declarado aquí, no inicializado
    static int tempCount = 0;
    String cpp = "";

    static String newTemp() {
        return "t" + tempCount++;
    }

    static void readVariable(String variableName) {
        if (!environment.isDeclared(variableName)) {
            System.out.println("Error semántico: Variable '" + variableName + "' no declarada.");
            return;
        }

        Scanner scanner = new Scanner(System.in);
        String type = environment.getSymbolType(variableName);
        try {
            switch (type) {
                case "int":
                    int intValue = scanner.nextInt();
                    environment.updateSymbolValue(variableName, intValue);
                    break;
                case "float":
                    float floatValue = scanner.nextFloat();
                    environment.updateSymbolValue(variableName, floatValue);
                    break;
                case "bool":
                    boolean boolValue = scanner.nextBoolean();
                    environment.updateSymbolValue(variableName, boolValue);
                    break;
                case "string":
                    String stringValue = scanner.nextLine();
                    environment.updateSymbolValue(variableName, stringValue);
                    break;
                default:
                    System.out.println("Tipo no soportado.");
            }
        } catch (InputMismatchException e) {
            System.out.println("Tipo de entrada incorrecto. Por favor, intente nuevamente.");
            scanner.nextLine();  // Limpia el buffer del escáner
        }
    }

    public static void main(String[] args) {
        codigoFuente = new File(args[0]);
        String nombreBase = codigoFuente.getName().replaceFirst("[.][^.]+$", "");
        String archivoCpp = "/Users/rodrigo.mb89/Desktop/LexiGen/" + nombreBase + ".cpp";

        trans = new GeneradorObj(archivoCpp);  // Inicializa aquí con el nombre dinámico

        environment.pushScope();  // Iniciar un ámbito global
        try {
            analizadorTokenManager lexicManager = new analizadorTokenManager(new SimpleCharStream(new InputStreamReader(new FileInputStream(codigoFuente), "UTF-8")));
            analizador parser = new analizador(lexicManager);
            try {
                parser.Programa();  // Realiza el análisis del programa
                System.out.println("Análisis completado.");

                // Corregir finales de línea del script usando dos2unix
                String dos2unixCommand = "dos2unix /Users/rodrigo.mb89/Desktop/LexiGen/Ensamble.sh";
                Runtime.getRuntime().exec(dos2unixCommand);

                // Espera breve para asegurarse que dos2unix haya terminado
                Thread.sleep(500);  // 500 ms es generalmente suficiente

                // Ejecutar el script shell después de completar el análisis
                String ejecutable = "/Users/rodrigo.mb89/Desktop/LexiGen/" + nombreBase;
                String shellCommand = String.format("/bin/bash /Users/rodrigo.mb89/Desktop/Lexigen/Ensamble.sh %s %s", archivoCpp, ejecutable);
                Process process = Runtime.getRuntime().exec(shellCommand);
                BufferedReader stdInput = new BufferedReader(new InputStreamReader(process.getInputStream()));
                BufferedReader stdError = new BufferedReader(new InputStreamReader(process.getErrorStream()));

                // Leer la salida estándar del script
                String s;
                while ((s = stdInput.readLine()) != null) {
                    System.out.println(s);
                }

                // Leer errores si los hay
                while ((s = stdError.readLine()) != null) {
                    System.err.println(s);
                }

                // Esperar a que el proceso termine y obtener el código de salida
                int exitVal = process.waitFor();
                System.out.println("Código de salida del script: " + exitVal);

            } catch (ParseException ex) {
                System.out.println("Error sintáctico: " + ex.getMessage());
            } catch (IOException e) {
                System.err.println("Error al ejecutar el script: " + e.getMessage());
            } catch (InterruptedException e) {
                System.err.println("El proceso fue interrumpido: " + e.getMessage());
            }
        } catch (FileNotFoundException ex) {
            System.err.println("Archivo no encontrado: " + args[0]);
        } catch (TokenMgrError ex) {
            System.err.println("Error léxico: " + ex.getMessage());
        } catch (Exception e) {
            System.err.println("Error general: " + e.getMessage());
        } finally {
            environment.popScope();  // Cerrar el ámbito global
        }
    }

    static boolean isTypeCompatible(String declaredType, Object value) {
        if (declaredType.equals("int") && value instanceof Integer) return true;
        if (declaredType.equals("float") && value instanceof Float) return true;
        if (declaredType.equals("bool") && value instanceof Boolean) return true;
        if (declaredType.equals("string") && value instanceof String) return true;
        return false;
    }

    static String getType(Object value) {
        if (value instanceof Integer) return "int";
        if (value instanceof Float) return "float";
        if (value instanceof Boolean) return "bool";
        if (value instanceof String) return "string";
        return "unknown";
    }
}

class GeneradorObj {
    private File f;

    public GeneradorObj(String ruta) {
        f = new File(ruta);
        CleanCPP();
        EscribirCod(
            "#include <stdio.h>\n" +
            "#include <iostream>\n" +
            "#include <string>\n" +
            "#include <cstring>\n" +
            "#include <locale.h>\n" +
            "using namespace std;\n" +
            "int main(){\n"
        );
    }

    public void EscribirCod(String s) {  // Transcribe el codigo
        try {
            FileWriter w = new FileWriter(f, true);
            BufferedWriter bw = new BufferedWriter(w);
            PrintWriter wr = new PrintWriter(bw);
            wr.write(s);  // Escribimos en el archivo
            wr.close();
            bw.close();
        } catch (IOException e) {
            e.printStackTrace();
            System.out.println("No se pudo escribir");
        }
    }

    private void CleanCPP() {
        try {
            FileWriter w = new FileWriter(f, false);
            BufferedWriter bw = new BufferedWriter(w);
            PrintWriter wr = new PrintWriter(bw);
            wr.write("");  // Escribimos en el archivo
            wr.close();
            bw.close();
        } catch (IOException e) {
            e.printStackTrace();
            System.out.println("No se pudo limpiar");
        }
    }

    public void end_to_CPlus() {
        EscribirCod("system(\"pause\");\nreturn 0;\n}");
    }
}

class Environment {
    private LinkedList<SymbolTable> scopes = new LinkedList<SymbolTable>();

    public void pushScope() {
        scopes.push(new SymbolTable());
    }

    public void popScope() {
        if (!scopes.isEmpty()) {
            scopes.pop();
        }
    }

    public void declareSymbol(String identifier, String type) {
        if (!scopes.isEmpty()) {
            scopes.peek().declareSymbol(identifier, type);
        }
    }

    public String getSymbolType(String identifier) {
        for (SymbolTable table : scopes) {
            if (table.isDeclared(identifier)) {
                return table.getSymbolType(identifier);
            }
        }
        return null;  // Retorna null si la variable no está declarada
    }

    public boolean isDeclared(String identifier) {
        for (SymbolTable table : scopes) {
            if (table.isDeclared(identifier)) {
                return true;
            }
        }
        return false;
    }

    public boolean isDeclaredLocally(String identifier) {
        if (!scopes.isEmpty()) {
            return scopes.peek().isDeclared(identifier);
        }
        return false;
    }

    public void updateSymbolValue(String identifier, Object value) {
        if (!scopes.isEmpty()) {
            SymbolTable currentScope = scopes.peek();
            if (currentScope.isDeclared(identifier)) {
                currentScope.updateValue(identifier, value);
            } else {
                System.out.println("Variable '" + identifier + "' no ha sido declarada en el ámbito actual.");
            }
        } else {
            System.out.println("No hay un ámbito activo en el que actualizar la variable.");
        }
    }
}



PARSER_END(analizador)

SKIP : {
    " "
    | "\t"
    | "\n"
    | "\r"
}

TOKEN_MGR_DECLS : {
    public Token getNextTokenB() {
        boolean bandera = false;
        Token matchedToken = null;
        int curPos = 0;
        boolean eofReached = false;
        int invalidTokenStartLine = -1;
        int invalidTokenStartColumn = -1;

        while (!eofReached) {
            try {
                curChar = input_stream.BeginToken();
            } catch (java.io.IOException e) {
                jjmatchedKind = 0;
                jjmatchedPos = -1;
                matchedToken = jjFillToken();
                return matchedToken;
            }

            try {
                input_stream.backup(0);
                while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L) {
                    curChar = input_stream.BeginToken();
                }
            } catch (java.io.IOException e1) {
                continue;
            }
            jjmatchedKind = 0x7fffffff;
            jjmatchedPos = 0;
            curPos = jjMoveStringLiteralDfa0_0();
            
            if (jjmatchedKind != 0x7fffffff) {
                if (jjmatchedPos + 1 < curPos) {
                    input_stream.backup(curPos - jjmatchedPos - 1);
                }
                
                if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                    matchedToken = jjFillToken();
                    return matchedToken;
                }
                
            } else {
                if (invalidTokenStartLine == -1) {
                    invalidTokenStartLine = input_stream.getEndLine();
                    invalidTokenStartColumn = input_stream.getEndColumn();
                    System.out.println("Error léxico encontrado en línea " + invalidTokenStartLine + ", columna " + invalidTokenStartColumn + " se encontró un: " + curChar);
                    System.out.println("Para corregir el error elimina el carácter inválido");
                }
            }
            try {
                input_stream.readChar();
                
            } catch (java.io.IOException e1) {
                eofReached = true;
                
            }
            
        }
        matchedToken = jjFillToken();
        matchedToken.kind = analizadorTokenManager.EOF;
        return matchedToken;
    }
   
}


TOKEN : {
    < INIT: "init" >
    | < END: "end" >
    | < INTEGER: "int" >
    | < FLOAT: "float" >
    | < BOOLEANO: "bool" >
    | < STRING: "string" >
    | < AND: "and" >
    | < OR: "or" >
    | < NOT: "not" >
    | < PRINT: "print" >
    | < INPUT: "read" >
    | < FOR: "for" >
    | < IF: "if" >
    | < ELSE: "else" >
    | < ELSE_IF: "elseif" >
    | < WHILE: "while" >
    | < DO: "do" >
    | < DEFINE_FUNC: "define" >
    | < GET_RETURN_FUNC: "get" >
    | < TRUE: "true" >
    | < FALSE: "false" >
    | < VOID: "void" >
    | < SUMA: "+" >
    | < RESTA: "-" >
    | < MULTI: "*" >
    | < DIV: "/" >
    | < IGUAL_QUE: "==">
    | < DIFERENTE_QUE: "!=">
    | < MAYOR_QUE: ">">
    | < MENOR_QUE: "<">
    | < MAYOR_IGUAL_QUE: ">=">
    | < MENOR_IGUAL_QUE: "<=">
    | < ASIGNA: "=" >
    | < FIN_LINE: ";" >
    | < LLAVE_IZQ: "{" >
    | < LLAVE_DER: "}" >
    | < PAREN_IZQ: "(" >
    | < PAREN_DER: ")" >
    | < CORCH_IZQ: "[" >
    | < CORCH_DER: "]" >
    | < COMA: "," >
    | < PUNTO: "." >
    | <CADENA: "\""(~["\""])*"\""> 
    | <NOMBRE_VAR: (<LETRA>)+ (<LETRA>|<NUMERO>)* > 
    | <NUMERO_FLOTANTE: (["0"-"9"])+"."(["0"-"9"])+> 
    | <NUMERO: (["0"-"9"])+>    
    | <#LETRA: (["A"-"Z","a"-"z","á","é","í","ó","ú"])+> 
    | <DECIMAL : (["0"-"9"])+["."](["0"-"9"])+ >
    | < CARACTER: "'" (["a"-"z"] | ["A"-"Z"] | ["0"-"9"] | [" "] | [","] | ["."] | ["!"]) "'" >
}

void Main() : {}
{
    try {
        Programa()
        <EOF>
    } catch (ParseException e) {
        System.out.println("Error de parseo: " + e.getMessage());
    }
}

void Programa() : {}
{
    <INIT>
    Bloque()
    <END>
    {
        trans.EscribirCod("// Inicio del programa en C++\n");
        trans.EscribirCod(cpp);
        trans.EscribirCod("\n// Fin del programa en C++\n");
        trans.EscribirCod("return 0;\n}");
    }
}

void Bloque() : {}
{
    <LLAVE_IZQ>
    Sentencias()
    <LLAVE_DER>
}

void Sentencias() : {}
{
    (   
       
        Impresion()
        | If()
        | Declaracion()
        | Inicializacion()
        | Lectura()
        | While()
        | DoWhile()
        | For()
        | Funcion()

    )*
}




void Arreglo() : {
    Token num;
}
{
    try { <CORCH_IZQ> {cpp += "[";} } catch (ParseException ex) {
        System.out.println("Error sintáctico, no se encontró corchete izquierdo [ en la línea " + token.beginLine + ", columna " + token.beginColumn + " después de " + token.image);
    }
    try { num = <NUMERO> {cpp += num.image;} } catch (ParseException ex) {
        System.out.println("Error sintáctico, no se encontró un número en la línea " + token.beginLine + ", columna " + token.beginColumn + " después de " + token.image);
    }
    try { <CORCH_DER> {cpp += "]";} } catch (ParseException ex) {
        System.out.println("Error sintáctico, no se encontró corchete derecho ] en la línea " + token.beginLine + ", columna " + token.beginColumn + " después de " + token.image);
    }
    (Arreglo())*
}


void Operacion() : {}
{
    (
        (<SUMA> | <RESTA> | <MULTI> | <DIV>) (<NUMERO> | <NOMBRE_VAR>| <DECIMAL>)
        | (<AND> | <OR> | <NOT>) (<NUMERO> | <NOMBRE_VAR>)
    )
}


void Lectura() : {
    Token var;
}
{
    <INPUT> var = <NOMBRE_VAR> <FIN_LINE>
    {
        cpp += "cin >> " + var.image + ";\n"; // Traducción directa para la entrada estándar de C++
    }
}



void Impresion() : {
    String expr;
    boolean first = true; // Para controlar la inserción del operador <<
}
{
    <PRINT>
    <PAREN_IZQ>
    expr = Expresion() { 
        cpp += "cout << " + expr; 
    }
    ( <COMA> expr = Expresion() { 
        cpp += " << " + expr; // Concatena cada expresión adicional con el operador <<
    } )*
    <PAREN_DER>
    <FIN_LINE>
    {
        cpp += " << endl;"; // Finaliza con el salto de línea en C++
    }
}


void Declaracion() : {
    Token tipo;
    Token var;
    Object expr = null;
    String tipoEsperado = null;
    String declCode = "";
}
{
    (
        <INTEGER> { tipoEsperado = "int"; declCode = "int "; }
        | <FLOAT> { tipoEsperado = "float"; declCode = "float "; }
        | <BOOLEANO> { tipoEsperado = "bool"; declCode = "bool "; }
        | <STRING> { tipoEsperado = "string"; declCode = "string "; }
    )
    var = <NOMBRE_VAR> { declCode += var.image; }
    (
        <ASIGNA> expr = Valor() {declCode += " = " + expr.toString(); }
    )?
    <FIN_LINE>
    {
        if (environment.isDeclaredLocally(var.image)) {
            System.out.println("Error semántico: Variable '" + var.image + "' ya declarada en el ámbito actual.");
        } else {
            environment.declareSymbol(var.image, tipoEsperado);
            if (expr != null && !isTypeCompatible(tipoEsperado, expr)) {
                System.out.println("Error semántico: Tipo de dato incorrecto para la variable '" + var.image + "' en la línea: " + var.beginLine + ". Esperado: " + tipoEsperado + ", encontrado: " + getType(expr) + ".");
            } else {
                cpp += declCode + ";\n";  // Correctamente añadir la declaración al código C++
            }
        }
    }
}



Object Valor() : {
    Token valorToken;
    Object result= "";
}
{
    valorToken = <NUMERO>(Operacion())* { result = Integer.parseInt(valorToken.image); return result; }
    |
    valorToken = <DECIMAL> { result = Float.parseFloat(valorToken.image); return result; }
    |
    valorToken = <CADENA> { result = valorToken.image.substring(1, valorToken.image.length() - 1); return result; }
    |
    valorToken = <NOMBRE_VAR> { result = environment.getSymbolType(valorToken.image); return result; }
    |
    <TRUE> { return Boolean.TRUE; }
    |
    <FALSE> { return Boolean.FALSE; }
    |
    <PAREN_IZQ> (<NOMBRE_VAR>|<NUMERO>|<DECIMAL>)Operacion() Termino() Valor()<PAREN_DER> { return result; }
    |
    Arreglo() { return result; }
    |
    { return null; }  // Siempre retorna un valor adecuadamente manejado
}



void Inicializacion() : {
    Token var;
    String expr;
}
{
    var = <NOMBRE_VAR> <ASIGNA> expr = Expresion() <FIN_LINE>
    {
        if (!environment.isDeclared(var.image)) {
            System.out.println("Error semántico: Variable '" + var.image + "' no declarada.");
            cpp += var.image + " = " + expr + ";\n";  // Asumiendo que el error se maneja en otro lado
        } else {
            // Asumiendo que se verifica el tipo y otros errores semánticos antes de este punto
            cpp += var.image + " = " + expr + ";\n";
        }
    }
}


String ExpresionLogica() : {
    String cond = "";
    Token op = null;  // Inicializar op
}
{
    cond = Expresion()
    (
        <IGUAL_QUE>{
            cond += "==";
            cond += Expresion();
        }
        |<DIFERENTE_QUE>{
            cond += "!=";
            cond += Expresion();
        }
        |<MAYOR_QUE>{
            cond += ">";
            cond += Expresion();
        } 
        |<MENOR_QUE>{
            cond += "<";
            cond += Expresion();
        }
        |<MAYOR_IGUAL_QUE>{
            cond += ">=";
            cond += Expresion();
        }  |<MENOR_IGUAL_QUE>{
            cond += "<=";
            cond += Expresion();
        }|<AND>{
            cond += "and";
            cond += Expresion();
        }|<OR>{
            cond += "or";
            cond += Expresion();
        }
        
        
    )*

    {return cond;}
}

String Expresion() : {
    String result = "";
}
{
    result = Termino()
    (
        <SUMA> {
            result += " + ";
            result += Termino();
        }
        |
        <RESTA> {
            result += " - ";
            result += Termino();
        }
        |
        <ASIGNA> {
            result += " = ";
            result += Termino();
        }
    )*
    {
        return result;
    }
}





String Termino() :{
    String t1, t2;
    Token mulop;
}

{
    t1 = Factor()
    (
         mulop = <MULTI> t2 = Termino() {
            String temp = newTemp();
            t1 = temp;
        }
        |  mulop = <DIV> t2 = Termino() {
            String temp = newTemp();
            t1 = temp;
        }
    )*
    { return t1; }
}

String Factor() : {
    Token t;
    String result = null;
}

{   
     t = <NOT> result = Factor() { String temp = newTemp(); return temp; }
    |t = <NOMBRE_VAR> { return t.image; }
    | t = <NUMERO> { return t.image; }
    | t = <DECIMAL> { return t.image; }
    | t = <CADENA> { return t.image; }
    | Arreglo() { return result; }
    | "(" result = Expresion() ")" { return result; }
}

void If() : {
    String cond;
}
{
    <IF> <PAREN_IZQ> cond = ExpresionLogica() <PAREN_DER>
    {
        cpp += "if (" + cond + ") {\n";
    }
    Bloque()
    {
        cpp += "}\n";
    }
    (
        <ELSE_IF> <PAREN_IZQ> cond = ExpresionLogica() <PAREN_DER>
        {
            cpp += "else if (" + cond + ") {\n";
        }
        Bloque()
        {
            cpp += "}\n";
        }
    )*
    (
        <ELSE>
        {
            cpp += "else {\n";
        }
        Bloque()
        {
            cpp += "}\n";
        }
    )?
}

void While() : {
    String cond;
}
{
    <WHILE> <PAREN_IZQ> cond = ExpresionLogica() <PAREN_DER>
    {
        cpp += "while (" + cond + ") {\n";
    }
    Bloque()
    {
        cpp += "}\n";
    }
}

void For() : {
    String init, cond, update;
}
{
    <FOR> <PAREN_IZQ> 
    init = InicializacionFor() <FIN_LINE> 
    cond = ExpresionLogica() <FIN_LINE> 
    update = Expresion() <PAREN_DER>
    {
        cpp += "for (" + init + "; " + cond + "; " + update + ") {\n";
    }
    Bloque()
    {
        cpp += "}\n";
    }
}


String InicializacionFor() : {
    Token var;
    String expr;
    String result = "";
}
{
    var = <NOMBRE_VAR> <ASIGNA> expr = Expresion()
    {
        result = var.image + " = " + expr;
        if (!environment.isDeclared(var.image)) {
            System.out.println("Error semántico: Variable '" + var.image + "' no declarada.");
        }
    }
    {
        return result;
    }
}

void DoWhile() : {
    String cond;
}
{
    <DO>
    {
        cpp += "do {\n";
    }
    Bloque()
    <WHILE> <PAREN_IZQ> cond = ExpresionLogica() <PAREN_DER> <FIN_LINE>
    {
        cpp += "} while (" + cond + ");\n";
    }
}

void Funcion() : {
    Token tipoRetorno, nombreFuncion;
}
{
    <DEFINE_FUNC>
    tipoRetorno = <VOID> { tipoRetorno = token; }  // Capturar el token VOID como tipo de retorno
    nombreFuncion = <NOMBRE_VAR> { nombreFuncion = token; }  // Capturar el nombre de la función
    <PAREN_IZQ> <PAREN_DER>  // Asumiendo que no hay parámetros por simplificación
    {
        cpp += tipoRetorno.image + " " + nombreFuncion.image + "() {\n";  // Comenzar la definición de la función en C++
    }
    Bloque()  // Parsear el bloque de la función
    {
        cpp += "}\n";  // Cerrar la definición de la función en C++
    }
}
