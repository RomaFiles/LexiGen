/* Generated By:JavaCC: Do not edit this line. LexiGenConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface LexiGenConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int INIT = 5;
  /** RegularExpression Id. */
  int END = 6;
  /** RegularExpression Id. */
  int INTEGER = 7;
  /** RegularExpression Id. */
  int FLOAT = 8;
  /** RegularExpression Id. */
  int BOOLEANO = 9;
  /** RegularExpression Id. */
  int STRING = 10;
  /** RegularExpression Id. */
  int AND = 11;
  /** RegularExpression Id. */
  int OR = 12;
  /** RegularExpression Id. */
  int NOT = 13;
  /** RegularExpression Id. */
  int PRINT = 14;
  /** RegularExpression Id. */
  int INPUT = 15;
  /** RegularExpression Id. */
  int FOR = 16;
  /** RegularExpression Id. */
  int IF = 17;
  /** RegularExpression Id. */
  int ELSE = 18;
  /** RegularExpression Id. */
  int ELSE_IF = 19;
  /** RegularExpression Id. */
  int WHILE = 20;
  /** RegularExpression Id. */
  int DO = 21;
  /** RegularExpression Id. */
  int DEFINE_FUNC = 22;
  /** RegularExpression Id. */
  int GET_RETURN_FUNC = 23;
  /** RegularExpression Id. */
  int TRUE = 24;
  /** RegularExpression Id. */
  int FALSE = 25;
  /** RegularExpression Id. */
  int VOID = 26;
  /** RegularExpression Id. */
  int SUMA = 27;
  /** RegularExpression Id. */
  int RESTA = 28;
  /** RegularExpression Id. */
  int MULTI = 29;
  /** RegularExpression Id. */
  int DIV = 30;
  /** RegularExpression Id. */
  int IGUAL_QUE = 31;
  /** RegularExpression Id. */
  int DIFERENTE_QUE = 32;
  /** RegularExpression Id. */
  int MAYOR_QUE = 33;
  /** RegularExpression Id. */
  int MENOR_QUE = 34;
  /** RegularExpression Id. */
  int MAYOR_IGUAL_QUE = 35;
  /** RegularExpression Id. */
  int MENOR_IGUAL_QUE = 36;
  /** RegularExpression Id. */
  int ASIGNA = 37;
  /** RegularExpression Id. */
  int FIN_LINE = 38;
  /** RegularExpression Id. */
  int LLAVE_IZQ = 39;
  /** RegularExpression Id. */
  int LLAVE_DER = 40;
  /** RegularExpression Id. */
  int PAREN_IZQ = 41;
  /** RegularExpression Id. */
  int PAREN_DER = 42;
  /** RegularExpression Id. */
  int CORCH_IZQ = 43;
  /** RegularExpression Id. */
  int CORCH_DER = 44;
  /** RegularExpression Id. */
  int COMA = 45;
  /** RegularExpression Id. */
  int PUNTO = 46;
  /** RegularExpression Id. */
  int CADENA = 47;
  /** RegularExpression Id. */
  int NOMBRE_VAR = 48;
  /** RegularExpression Id. */
  int NUMERO_FLOTANTE = 49;
  /** RegularExpression Id. */
  int NUMERO = 50;
  /** RegularExpression Id. */
  int LETRA = 51;
  /** RegularExpression Id. */
  int DECIMAL = 52;
  /** RegularExpression Id. */
  int CARACTER = 53;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"init\"",
    "\"end\"",
    "\"int\"",
    "\"float\"",
    "\"bool\"",
    "\"string\"",
    "\"and\"",
    "\"or\"",
    "\"not\"",
    "\"print\"",
    "\"read\"",
    "\"for\"",
    "\"if\"",
    "\"else\"",
    "\"elseif\"",
    "\"while\"",
    "\"do\"",
    "\"define\"",
    "\"get\"",
    "\"true\"",
    "\"false\"",
    "\"void\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"==\"",
    "\"!=\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "\"=\"",
    "\";\"",
    "\"{\"",
    "\"}\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\",\"",
    "\".\"",
    "<CADENA>",
    "<NOMBRE_VAR>",
    "<NUMERO_FLOTANTE>",
    "<NUMERO>",
    "<LETRA>",
    "<DECIMAL>",
    "<CARACTER>",
  };

}
